# -*- coding: utf-8 -*-
"""enB4_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11wq-jYQ3USsxASrHUA3l0JAnhWitGm03
"""

import os
import shutil
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

"""여기서부터 efficientNet을 이용한 모델링 작업"""

# 이미지의 너비와 높이 그리고 색상 채널
image_dimensions = {'heights' : 380, 'width': 380, 'channels' : 3}

# train, test, validation 데이터들의 경로
base_path = 'D:/test_image_new'
train_path = os.path.join(base_path, 'fake')
val_path = os.path.join(base_path, 'val')
test_path = os.path.join(base_path, 'test')

from tensorflow.keras.applications.efficientnet import EfficientNetB0
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.losses import BinaryCrossentropy
from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint
from tensorflow.keras.models import Sequential, load_model
from tensorflow.keras.utils import image_dataset_from_directory

# 이미지 데이터 준비
input_size = 380
batch_size_num = 1

# train data들에 대한 ImageDataGenerator
train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=10,
    width_shift_range=0.1,
    height_shift_range=0.1,
    shear_range=0.2,
    zoom_range=0.1,
    horizontal_flip=True,
    fill_mode='nearest',

    validation_split = 0.2
)


# flow_from_directory() 함수를 이용하여 test_image/face_crop 폴더안에 있는 이미지들을 준비
# 자동으로 레이블링이 됨
train_generator = train_datagen.flow_from_directory(
    base_path,
    target_size=(input_size, input_size),
    color_mode = "rgb",
    class_mode = 'binary',
    batch_size=batch_size_num,
    shuffle = True
  
)

# CNN Classifier 학습
efficient_net = EfficientNetB0(
        include_top = False,
        weights='imagenet',
        input_shape=(380, 380, 3),
        pooling='max'
    )
efficient_net.trainable = True

model = Sequential()
model.add(efficient_net)
model.add(Dense(units=512, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(units=128, activation='relu'))
model.add(Dense(units=1, activation='sigmoid'))
model.summary()


optimizer = Adam(lr = 0.001)
# loss = BinaryCrossentropy(from_logits=False)
model.compile(optimizer = optimizer, 
                       loss =  'binary_crossentropy',
                       metrics = ['accuracy'])

checkpoint_filepath = 'D:/tmp_checkpoint'
print('Creating Directory: ' + checkpoint_filepath)
os.makedirs(checkpoint_filepath, exist_ok=True)

custom_callbacks = [
    EarlyStopping(
        monitor = 'val_loss',
        mode = 'min',
        patience = 5,
        verbose = 1
    ),
    ModelCheckpoint(
        filepath = os.path.join(checkpoint_filepath, 'best_model.h5'),
        monitor = 'val_loss',
        mode = 'min',
        verbose = 1,
        save_best_only = True
    )
]

num_epochs = 1
history = model.fit_generator(
    train_generator,
    epochs = num_epochs,
    steps_per_epoch = len(train_generator),
    verbose = 1
)

model.save('D:/enB4_model/')

